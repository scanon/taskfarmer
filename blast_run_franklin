#!/bin/ksh
SERVER=$1
PORT=$2
TIMEOUT=45
PATH=$TMPDIR:$PATH:$BASE/bin
PERL=/project/projectdirs/genomes/apps/lib/perl5

# Cleanup any stale stuff
rm -rf /tmp/genomes

mkdir $TMPDIR
cd $TMPDIR
export LD_LIBRARY_PATH=/scratch/scratchdirs/canon/software/lib/
export PERLLIB=$PERL/site_perl/5.8.8/:$PERL/5.8.8/:$PERL/5.8.8/x86_64-linux-thread-multi

function fshutdown {
  echo "Shutting down"
  echo "" > shutdown
}

function cleanup {
  echo "Called cleanup"
  cd /tmp
  rm -rf $TMPDIR
  exit
}
trap cleanup 2 15
#trap fshutdown 17

let i=RANDOM/3000
#sleep $i

#
#
if [ ! -e $TMPDIR/$DB.pal ] ;then
  cp $DBDIR/$DB.* $TMPDIR/
  cp $BASE/bin/* $TMPDIR/
fi

eval "$IDCOMMAND"

(echo "IDENT $ID";echo "NEXT")|netcat $SERVER $PORT > query
while [ -s ./query ] ; do
   header=$(grep '^>' query|tail -1|sed 's/>//'|sed 's/ .*//' )
   cat query|blastall -d ./$DB -F 'm S' -o output2 $BLASTOPTS   2>&1
#  ./blast2m8.pl -i output -o output2
  echo "IDENT $ID" > message
  echo "RESULTS $header" >> message
  cat output2 >> message
  echo "DONE" >> message
  if [ ! -e shutdown ] ; then
    echo "NEXT" >> message 
  fi

# Send Message
 retry=10
 (cat message)|netcat -w $TIMEOUT $SERVER $PORT > response
  while [ $retry -gt 0 ] && [ $(grep -c RECEIVED response) -eq 0 ] ; do
    echo "Retrying"
    (cat message)|netcat -w $TIMEOUT $SERVER $PORT > response
    let retry=retry-1
  done

  if [ -e shutdown ] || [ $retry -eq 0 ] ; then
    echo "Shutting down"
    cleanup
  fi
#
  rm query
  grep -v RECEIVED response  > query
done

cleanup
