#!/usr/bin/perl

use Socket;

$server_port=4999;

# make the socket
socket(SERVER, PF_INET, SOCK_STREAM, getprotobyname('tcp'));

# so we can restart our server quickly
setsockopt(SERVER, SOL_SOCKET, SO_REUSEADDR, 1);

# build up my socket address
$my_addr = sockaddr_in($server_port, INADDR_ANY);
bind(SERVER, $my_addr)
    or die "Couldn't bind to port $server_port : $!\n";

# establish a queue for incoming connections
listen(SERVER, SOMAXCONN)
    or die "Couldn't listen on port $server_port : $!\n";

# accept and process connections
$item=0;
open(PROGRESS,">> ./progress");
open(OUTPUT,">> ./final.output");
open(ERROR,">> ./error.output");
$SIG{INT} = \&catch_int;  # best strategy
while (<stdin> ){
  ($bl,$header,$rest)=split /[> ]/;
  $address=accept(CLIENT, SERVER);
  ($cDomain, $cPort, $cAdd) = unpack('S n a4 x8', $address);
  $cHost=join('.',unpack('C4', $cAdd)),time-$start{$cHost};

    # do something with CLIENT
  $next=1;
  $lines=0;
  $input=<CLIENT>;
  $next=0 if $input=~/^DONE/;
  if ($sent{$cHost}>0 && $next==0){
    print ERROR "no report for $sent{$cHost}:$headers{$cHost} from $cHost\n" if defined $sent{$cHost};
    print "no report for $sent{$cHost}:$headers{$cHost} from $cHost\n" if defined $sent{$cHost};
  }
  while($next eq 1){
    if ($input=~/^DONE$/){
      $next=0;
      printf PROGRESS "%d:%s:%d:%s:%d:%d\n", $sent{$cHost}, $cHost,time-$start{$cHost},$headers{$cHost},$lines,time;
      printf "seq:%-8d\ts:%15s host:%-16s\ttime:%-4d s\tlines: %d\n", $sent{$cHost}, $headers{$cHost},$cHost,time-$start{$cHost},$lines;
    }
    elsif ($input=~/^empty$/){
      print ERROR "empty:$sent{$cHost}:$headers{$cHost}:$cHost\n" if defined $sent{$cHost};
      print "empty report for $sent{$cHost}:$headers{$cHost} from $cHost\n" if defined $sent{$cHost};
    }
    else{
      print OUTPUT $input;
      $lines++;
    }
    $input=<CLIENT>;
  }
  $next=1;
  while($next eq 1){
    print CLIENT $_;
    $_=<>;
    $next=0 if /^$/;
  }
  print CLIENT $_;
  close CLIENT;
  $sent{$cHost}=$item;
  $start{$cHost}=time;
  $headers{$cHost}=$header;
#  print "Sent: $item:$header to $cHost\n";
  $item++;
}

$remaining=length keys %sent;
print "Remaining $remaining\n";
while ($remaining){
  $address=accept(CLIENT, SERVER);
  ($cDomain, $cPort, $cAdd) = unpack('S n a4 x8', $address);
  $cHost=join('.',unpack('C4', $cAdd)),time-$start{$cHost};
  $next=1;
  $input=<CLIENT>;
  $next=0 if $input=~/^DONE/;
  $lines=0;
  while($next eq 1){
    $input=<CLIENT>;
    if ($input=~/^DONE$/){
      $next=0;
    }
    elsif ($input=~/^empty$/){
      print ERROR "empty:$sent{$cHost}:$headers{$cHost}:$cHost\n" if defined $sent{$cHost};
      print "empty report for $sent{$cHost}:$headers{$cHost} from $cHost\n" if defined $sent{$cHost};
    }
    else{
      print OUTPUT $input;
      $lines++;
    }
    $next=0 unless $input;
  }
  printf PROGRESS "%d:%s:%d:%s:%d\n", $sent{$cHost}, $cHost,time-$start{$cHost},$headers{$cHost},$lines;
  printf "seq:%-8d\ts:%15s host:%-16s\ttime:%-4d s\tlines: %d\n", $sent{$cHost}, $headers{$cHost},$cHost,time-$start{$cHost},$lines;
  $remaining--;
  close CLIENT;
}


close PRROGRESS;
close OUTPUT;
close ERROR;
close SERVER ;

sub catch_int {
  my $signame = shift;
  close PRROGRESS;
  close OUTPUT;
  close ERROR;
  close SERVER ;
  close PROGRESS;
  die "Somebody sent me a SIG$signame";
}
