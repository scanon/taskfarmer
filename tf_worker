#!/bin/sh
#
# This is the standard run script that is executed on the compute node.
# It fetches sequences from a server using netcat, runs some analysis, and pushes back results
#
#
SERVER=$1
PORT=$2

if [ ! -z $SKEW ] ; then
  let skew=RANDOM%SKEW
  sleep $skew
fi

export TF_TMPDIR=/tmp/$USER-$$

# Source any setup files that are needed for the system.
#
TF_CONFDIR=$TF_HOME/share/taskfarmer/
if [ -x $TF_CONFDIR/$NERSC_HOST.stage ] ; then
  . $TF_CONFDIR/$NERSC_HOST.stage
fi

if [ ! -z $TF_SERVERS ] ; then
  if [ $(echo $TF_SERVERS | grep -c '^/' ) -eq 0 ] ; then
    TF_SERVERS=`pwd`/servers
  fi
fi

mkdir -p $TF_TMPDIR
cd $TF_TMPDIR

# Source the staging file specified by the user if there is one.
#
if [ ! -z $STAGE ] && [ ! -x "$STAGE" ] ; then
  echo "Error sourcing $STAGE"
  exit
fi

if [ ! -z $STAGE ] && [ -x "$STAGE" ] ; then
  . $STAGE
fi

# Change back into the temp dir just in case the
# stager moved us around.
#
cd $TF_TMPDIR

# This will be called if an interupt is received.
#
cleanup() {
#  echo "Called cleanup"
  for pid in $PIDS ; do
    if [ -d /proc/$pid ] ;then
      kill $pid
    fi
  done
  sleep 1
  cd /tmp
  rm -rf $TF_TMPDIR
  CLEANUP=1
  if [ ! -z $STAGE ] && [ -x "$STAGE" ] ; then
  . $STAGE
  fi
  exit
}
# Set the trap
trap cleanup 2 15

launch_threads() {
  for THREAD in $(seq $THREADS) ; do
    export ID="$BID-$THREAD"
    perl $TF_HOME/bin/tf_worker_thread.pl $SERVER $PORT $THREAD &
    PIDS="$PIDS $!"
  done
  # Wait for all threads to exit before cleanup
  wait
}


# Determine the number of threads
#
[ -z $THREADS ] && THREADS=$(grep -c processor /proc/cpuinfo)
#
# Run the IDCOMMAND
eval $IDCOMMAND
export BID=$ID

if [ ! -z $TF_SERVERS ] ; then
  for l in $(cat $TF_SERVERS|awk -F: '{print $1":"$2}') ; do
    SERVER=$(echo $l|awk -F: '{print $1}')
    PORT=$(echo $l|awk -F: '{print $2}')
    echo "Starting with server: $SERVER and port: $PORT"
    launch_threads
  done
else
  launch_threads
fi


# Cleanup Cleanup everybody do their share
#
cleanup
