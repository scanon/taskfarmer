#!/bin/ksh
#
# This is the standard run script that is executed on the compute node.
# It fetches sequences from a server using netcat, runs some analysis, and pushes back results
#
#
SERVER=$1
PORT=$2
TIMEOUT=45
TMPDIR=/tmp/$USER/$$
PATH=$TMPDIR:$PATH:$BASE/bin
PERL=/project/projectdirs/genomes/apps/lib/perl5
MFILE=message
export STEP

ulimit -m 1536000
ulimit -M 1536000
export LD_LIBRARY_PATH=/scratch/scratchdirs/canon/software/lib/
export PERLLIB=$PERL/site_perl/5.8.8/:$PERL/5.8.8/:$PERL/5.8.8/x86_64-linux-thread-multi
mkdir -p $TMPDIR
cd $TMPDIR

#$BASE/watch_mem &

function cleanup {
#  echo "Called cleanup"
  cd /tmp
  rm -rf $TMPDIR
  exit
}
trap cleanup 2 15

function catfiles {
  for f in $(ls *.tbl *.geneC* )
  do
    echo "FILE $f"
    cat $f
    echo "DONE"
  done
}

let i=RANDOM/3000
#sleep $i

eval "$IDCOMMAND"

export ARGS=$(echo "ARGS"|netcat $SERVER $PORT)

(echo "IDENT $ID";echo "NEXT")|netcat $SERVER $PORT > rmess
while [ -s ./rmess ] ; do
# Run the pipeline wrapper script.
#
  STEP=$(grep '^STEP:' rmess|sed 's/STEP: //')
  cat rmess|grep -v '^STEP:' > query
  $BASE/run_pipeline
  RET=$?
  rm rmess query
  echo "IDENT $ID" > $MFILE
  if [ $RET -eq 0 ] ; then
    echo "RESULTS $STEP" >> $MFILE
    catfiles >> $MFILE
    echo "DONE" >> $MFILE
  else
    echo "ERROR $STEP" >> $MFILE
    sleep 1
  fi

  if [ ! -e shutdown ] ; then
    echo "NEXT" >> $MFILE 
  fi

# Send Message
 retry=10
 (cat $MFILE)|netcat -w $TIMEOUT $SERVER $PORT > response
  while [ $retry -gt 0 ] && [ $(grep -c RECEIVED response) -eq 0 ] ; do
    echo "Retrying $retry"
    (cat $MFILE)|netcat -w $TIMEOUT $SERVER $PORT > response
    let retry=retry-1
  done

  if [ -e shutdown ] || [ $retry -eq 0 ] ; then
    echo "Shutting down"
    cleanup
  fi
#
  grep -v RECEIVED response  > rmess
done

cleanup
